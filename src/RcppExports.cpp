// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/juliaapi.h"
#include <Rcpp.h>

using namespace Rcpp;

// juliaapi_init
bool juliaapi_init(const std::string& libpath);
RcppExport SEXP _juliaapi_juliaapi_init(SEXP libpathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type libpath(libpathSEXP);
    rcpp_result_gen = Rcpp::wrap(juliaapi_init(libpath));
    return rcpp_result_gen;
END_RCPP
}
// juliaapi_load_constants
void juliaapi_load_constants(Environment env);
RcppExport SEXP _juliaapi_juliaapi_load_constants(SEXP envSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Environment >::type env(envSEXP);
    juliaapi_load_constants(env);
    return R_NilValue;
END_RCPP
}
// juliaapi_print
void juliaapi_print(SEXP s);
RcppExport SEXP _juliaapi_juliaapi_print(SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type s(sSEXP);
    juliaapi_print(s);
    return R_NilValue;
END_RCPP
}
// juliaapi_eval_string
SEXP juliaapi_eval_string(const char* str, bool preserve);
RcppExport SEXP _juliaapi_juliaapi_eval_string(SEXP strSEXP, SEXP preserveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type str(strSEXP);
    Rcpp::traits::input_parameter< bool >::type preserve(preserveSEXP);
    rcpp_result_gen = Rcpp::wrap(juliaapi_eval_string(str, preserve));
    return rcpp_result_gen;
END_RCPP
}
// juliaapi_get_function
SEXP juliaapi_get_function(SEXP module, const char* str);
RcppExport SEXP _juliaapi_juliaapi_get_function(SEXP moduleSEXP, SEXP strSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type module(moduleSEXP);
    Rcpp::traits::input_parameter< const char* >::type str(strSEXP);
    rcpp_result_gen = Rcpp::wrap(juliaapi_get_function(module, str));
    return rcpp_result_gen;
END_RCPP
}
// juliaapi_call
SEXP juliaapi_call(SEXP f, List args);
RcppExport SEXP _juliaapi_juliaapi_call(SEXP fSEXP, SEXP argsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type f(fSEXP);
    Rcpp::traits::input_parameter< List >::type args(argsSEXP);
    rcpp_result_gen = Rcpp::wrap(juliaapi_call(f, args));
    return rcpp_result_gen;
END_RCPP
}
// juliaapi_call0
SEXP juliaapi_call0(SEXP f);
RcppExport SEXP _juliaapi_juliaapi_call0(SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(juliaapi_call0(f));
    return rcpp_result_gen;
END_RCPP
}
// juliaapi_call1
SEXP juliaapi_call1(SEXP f, SEXP a);
RcppExport SEXP _juliaapi_juliaapi_call1(SEXP fSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(juliaapi_call1(f, a));
    return rcpp_result_gen;
END_RCPP
}
// juliaapi_call2
SEXP juliaapi_call2(SEXP f, SEXP a, SEXP b);
RcppExport SEXP _juliaapi_juliaapi_call2(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(juliaapi_call2(f, a, b));
    return rcpp_result_gen;
END_RCPP
}
// juliaapi_call3
SEXP juliaapi_call3(SEXP f, SEXP a, SEXP b, SEXP c);
RcppExport SEXP _juliaapi_juliaapi_call3(SEXP fSEXP, SEXP aSEXP, SEXP bSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type f(fSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type b(bSEXP);
    Rcpp::traits::input_parameter< SEXP >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(juliaapi_call3(f, a, b, c));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_juliaapi_juliaapi_init", (DL_FUNC) &_juliaapi_juliaapi_init, 1},
    {"_juliaapi_juliaapi_load_constants", (DL_FUNC) &_juliaapi_juliaapi_load_constants, 1},
    {"_juliaapi_juliaapi_print", (DL_FUNC) &_juliaapi_juliaapi_print, 1},
    {"_juliaapi_juliaapi_eval_string", (DL_FUNC) &_juliaapi_juliaapi_eval_string, 2},
    {"_juliaapi_juliaapi_get_function", (DL_FUNC) &_juliaapi_juliaapi_get_function, 2},
    {"_juliaapi_juliaapi_call", (DL_FUNC) &_juliaapi_juliaapi_call, 2},
    {"_juliaapi_juliaapi_call0", (DL_FUNC) &_juliaapi_juliaapi_call0, 1},
    {"_juliaapi_juliaapi_call1", (DL_FUNC) &_juliaapi_juliaapi_call1, 2},
    {"_juliaapi_juliaapi_call2", (DL_FUNC) &_juliaapi_juliaapi_call2, 3},
    {"_juliaapi_juliaapi_call3", (DL_FUNC) &_juliaapi_juliaapi_call3, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_juliaapi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
